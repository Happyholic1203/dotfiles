snippet lic "My favorite license" b
# ${1:one line to give the program's name and a brief description}
# Copyright `date +%Y` Yu-Cheng (Henry) Huang
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# 	http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
${0}
endsnippet

snippet sig "My signature" b
# ****************************************************************************
#   FileName     [ ${1:`!p snip.rv = snip.fn`} ]
#   Package      [ ${2:`pwd | xargs -n1 basename`} ]
#   Synopsis     [ $3 ]
#   Author       [ Yu-Cheng (Henry) Huang ]
#   Copyright    [ Copyleft(c) `date +%Y` Yu-Cheng (Henry) Huang ]
# ****************************************************************************
endsnippet

snippet bt "Set breakpoint"
try:
    from IPython.core.debugger import Pdb; pdb = Pdb()
    from IPython import embed; embed()
except:
    import pdb
    from code import interact
    interact(local=dict(globals(), **locals()))
endsnippet

snippet _ "__magic__" w
__${1:name}__
endsnippet

snippet akw "*args, **kwargs" w
*args, **kwargs
endsnippet

snippet werkzeug "shutdown werkzeug server"
func = request.environ.get('werkzeug.server.shutdown')
if func is None:
	raise RuntimeError('Not running with the Werkzeug server')
print 'Shutting down Werkzeug server...'
func()
endsnippet

snippet flask "flask template" b
import json
import os
from flask import Flask, Response, request

app = Flask(__name__, static_url_path='', static_folder='public')
app.add_url_rule('/', 'root', lambda: app.send_static_file('index.html'))

@app.route($1)
def ${2:handler}():
	$3

	# if request.method == 'POST':
	# 	# TODO
	# if request.method == 'GET':
	# 	# TODO

    # return Response(
	# 	json.dumps(data),
	# 	mimetype='application/json',
	# 	headers={'Cache-Control': 'no-cache'})

if __name__ == '__main__':
    app.run(port=int(os.environ.get("PORT", 8080)))
endsnippet
